#!/usr/bin/env bash

# TODO: parsing is very rudimentary... should be improved to be more contextual (so we can know if an 'And' is a 'When' vs 'Then' child, for example)
  # parse into defs arrays, plus other keyword arrays... use index and searching to understand context
# TODO: support dirs for -f and -t
# TODO: Add additional keyword support
# TODO: only assertions ("Then"s) should result in green checks
# TODO: add "missing scenario" check
# TODO: add "missing scenario" auto-scaffolding
# TODO: add results table
# TODO: make "STEPS" associative array name configurable

if command -v tput &>/dev/null && tty -s; then
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  NORMAL=$(tput sgr0)
else
  RED=$(echo -en "\e[31m")
  GREEN=$(echo -en "\e[32m")
  NORMAL=$(echo -en "\e[00m")
fi

# see above TODO about parsing...

declare -a defs
declare -a funcs
declare -a whens
declare -a givens
declare -a thens

function When () {
  step "$1" "$2" "whens"
}

function Given () {
  step "$1" "$2" "givens"
}

function Then () {
  step "$1" "$2" "thens"
}

function step () {
  defs+=( "$1" )
  funcs+=( "$2" )
  index=$((${#defs[@]} - 1))
  
  case $3 in
    "whens")
      whens[$index]="$1"
      ;;

    "givens")
      givens[$index]="$1"
      ;;

    "thens")
      thens[$index]="$1"
      ;;

    *)
      echo none
      ;;
  esac
}

#unset flags
flags=()

while [[ "$#" -ne 0 ]]; do
  case "$1" in
  -f | --features)
    shift
    feature=`cat $1`
    ;;
  -t | --tests)
    shift
    test="$1"
    ;;
  -v | --version)
    printf "pre-release\n"
    exit 0
    ;;
  *)
    arguments+=("$1")
    ;;
  esac
  shift
done

source "$test"

to_values_list () {
  local -n outlist=$1
  local -n inmap=$2

  for param in "${!inmap[@]}"; do
    if [[ $param == "0" ]]
    then
      continue
    fi
      outlist+=(${inmap[$param]})
  done
}

for i in ${!defs[@]}; do
  if [[ "$feature" =~ ${defs[i]} ]]
  then
    list=()
    to_values_list list BASH_REMATCH
    ${funcs["$i"]} ${list[@]}
    if [[ $? -eq 0 ]]
    then
      if [[ "${whens["$i"]}" == "${defs["$i"]}" ]];
      then
        printf "\nWhen ${BASH_REMATCH[0]}"
      elif [[ "${givens["$i"]}" == "${defs["$i"]}" ]];
      then
        printf "\nGiven ${BASH_REMATCH[0]}"
      elif [[ "${thens["$i"]}" == "${defs["$i"]}" ]];
      then
        printf "\n\t${GREEN}✔${NORMAL} Then ${BASH_REMATCH[0]}"
      fi
    else
      printf "\n${RED}✖ ${NORMAL} ${BASH_REMATCH[0]}"
    fi
  else 
    echo 'no match!'
  fi
done
printf "\n"


